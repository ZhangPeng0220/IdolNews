package com.speedystone.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.idol.idolnews.bean.TopStoriesEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOP_STORIES_ENTITY".
*/
public class TopStoriesEntityDao extends AbstractDao<TopStoriesEntity, Integer> {

    public static final String TABLENAME = "TOP_STORIES_ENTITY";

    /**
     * Properties of entity TopStoriesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(1, String.class, "image", false, "IMAGE");
        public final static Property Ga_prefix = new Property(2, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(4, int.class, "id", true, "ID");
    }


    public TopStoriesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TopStoriesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOP_STORIES_ENTITY\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"IMAGE\" TEXT," + // 1: image
                "\"GA_PREFIX\" TEXT," + // 2: ga_prefix
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"ID\" INTEGER PRIMARY KEY NOT NULL );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOP_STORIES_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopStoriesEntity entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(3, ga_prefix);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopStoriesEntity entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(3, ga_prefix);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getId());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 4);
    }    

    @Override
    public TopStoriesEntity readEntity(Cursor cursor, int offset) {
        TopStoriesEntity entity = new TopStoriesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ga_prefix
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopStoriesEntity entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGa_prefix(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setId(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(TopStoriesEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(TopStoriesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopStoriesEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
